generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MAIN MODELS

model Category {
  id String @id @default(cuid())
  name String @unique
  slug String @unique
  description String?
  topics Topic[]
  updatedBy String
  updatedByUser User @relation(fields: [updatedBy], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("categories")
}

model Topic {
  id String @id @default(cuid())
  name String @unique
  slug String @unique
  description String?
  categoryId String
  category Category @relation(fields: [categoryId], references: [id])
  prefixes Prefix[] @relation("TopicPrefix")
  threads Thread[]
  updatedBy String
  updatedByUser User @relation(fields: [updatedBy], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("topics")
  @@index([categoryId], name: "idx_topic_category")
  @@index([createdAt], name: "idx_topic_created_at")
  @@index([updatedAt], name: "idx_topic_updated_at")
}

model Prefix {
  id String @id @default(cuid())
  name String @unique
  slug String @unique
  background String? @default("#000000")
  foreground String? @default("#FFFFFF")
  description String?
  topics Topic[] @relation("TopicPrefix")
  threads Thread[]
  updatedBy String
  updatedByUser User @relation(fields: [updatedBy], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("prefixes")
  @@index([createdAt], name: "idx_prefix_created_at")
  @@index([updatedAt], name: "idx_prefix_updated_at")
}

model Thread {
  id String @id @default(cuid())
  title String
  slug String @unique
  summary String
  content String
  topicId String
  views Int @default(0)
  topic Topic @relation(fields: [topicId], references: [id])
  prefixId String
  prefix Prefix @relation(fields: [prefixId], references: [id])
  replies Reply[]
  userId String
  user User @relation(fields: [userId], references: [id])
  updatedBy String
  updatedByUser User @relation("UpdatedThreads", fields: [updatedBy], references: [id])
  isPinned Boolean @default(false)
  isLocked Boolean @default(false)
  isHidden Boolean @default(false)
  deletedAt DateTime?
  deletedBy String?
  deletedByUser User? @relation("DeletedThreads", fields: [deletedBy], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("threads")
  @@index([topicId], name: "idx_thread_topic")
  @@index([prefixId], name: "idx_thread_prefix")
  @@index([createdAt], name: "idx_thread_created_at")
  @@index([updatedAt], name: "idx_thread_updated_at")
}

model Reply {
  id String @id @default(cuid())
  content String
  threadId String
  thread Thread @relation(fields: [threadId], references: [id])
  comments Comment[]
  userId String
  user User @relation(fields: [userId], references: [id])
  deletedAt DateTime?
  deletedBy String?
  deletedByUser User? @relation("DeletedReplies", fields: [deletedBy], references: [id])
  isResolve Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("replies")
  @@index([threadId], name: "idx_reply_thread")
  @@index([createdAt], name: "idx_reply_created_at")
  @@index([updatedAt], name: "idx_reply_updated_at")
}

model Comment {
  id String @id @default(cuid())
  content String
  replyId String
  reply Reply @relation(fields: [replyId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("comments")
  @@index([replyId], name: "idx_comment_reply")
  @@index([createdAt], name: "idx_comment_created_at")
  @@index([updatedAt], name: "idx_comment_updated_at")
}


// USER & AUTH MODELS

model User {
  id String @id
  name String
  email String @unique
  emailVerified Boolean
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  threads Thread[]
  replies Reply[]
  comments Comment[]
  categories Category[]
  topics Topic[]
  prefixes Prefix[]
  updatedThreads Thread[] @relation("UpdatedThreads")
  deletedThreads Thread[] @relation("DeletedThreads")
  deletedReplies Reply[] @relation("DeletedReplies")
  @@map("users")
}
